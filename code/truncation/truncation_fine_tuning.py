# -*- coding: utf-8 -*-
"""truncation_fine_tuning.ipynb

Automatically generated by Colab.

"""

!pip install pandas

import pandas as pd
import json
import requests
from pprint import pprint

# Upload the file to Google Colab
from google.colab import files
uploaded = files.upload()

# Load the CSV file into a DataFrame
df = pd.read_csv('truncation_examples.csv')

# Define the system message and functions for creating user messages
system_message = "You are a helpful medical assistant. You are to truncate patient notes based on the provided calculator name, calculator code, value, and evidence. The expected output should not contain the provided calculator information so that we can ask what calculator to use at the end of the note."

def create_user_message(row):
    return f"""Calculator Name: {row['calculator_name']}\nCalculator Code: {row['calculator_code']}\nValue: {row['value']}\nPatient Note: {row['patient']}\nEvidence: {row['evidence']}\n\nTruncated Note: """

def prepare_example_conversation(row):
    messages = []
    messages.append({"role": "system", "content": system_message})

    user_message = create_user_message(row)
    messages.append({"role": "user", "content": user_message})

    messages.append({"role": "assistant", "content": row["truncated_note"]})

    return {"messages": messages}

# Use all rows of the dataset for training
training_df = df

# Apply the prepare_example_conversation function to each row of the training_df
training_data = training_df.apply(prepare_example_conversation, axis=1).tolist()

# Display a sample of the prepared training data
for example in training_data[:5]:
    print(example)

# Write the training data to a JSONL file
with open('truncation_training_data.jsonl', 'w') as f:
    for conversation in training_data:
        json.dump(conversation, f)
        f.write('\n')
